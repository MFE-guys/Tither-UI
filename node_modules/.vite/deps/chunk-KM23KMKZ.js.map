{
  "version": 3,
  "sources": ["../../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts", "../../../../../packages/platform-browser/src/browser/browser_adapter.ts", "../../../../../packages/platform-browser/src/browser/server-transition.ts", "../../../../../packages/platform-browser/src/browser/testability.ts", "../../../../../packages/platform-browser/src/browser/xhr.ts", "../../../../../packages/platform-browser/src/dom/events/event_manager.ts", "../../../../../packages/platform-browser/src/dom/shared_styles_host.ts", "../../../../../packages/platform-browser/src/dom/dom_renderer.ts", "../../../../../packages/platform-browser/src/dom/events/dom_events.ts", "../../../../../packages/platform-browser/src/dom/events/key_events.ts", "../../../../../packages/platform-browser/src/browser.ts", "../../../../../packages/platform-browser/src/browser/meta.ts", "../../../../../packages/platform-browser/src/browser/title.ts", "../../../../../packages/platform-browser/src/dom/util.ts", "../../../../../packages/platform-browser/src/browser/tools/browser.ts", "../../../../../packages/platform-browser/src/browser/tools/common_tools.ts", "../../../../../packages/platform-browser/src/browser/tools/tools.ts", "../../../../../packages/platform-browser/src/browser/transfer_state.ts", "../../../../../packages/platform-browser/src/dom/debug/by.ts", "../../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts", "../../../../../packages/platform-browser/src/security/dom_sanitization_service.ts", "../../../../../packages/platform-browser/src/private_export.ts", "../../../../../packages/platform-browser/src/version.ts", "../../../../../packages/platform-browser/src/platform-browser.ts", "../../../../../packages/platform-browser/public_api.ts", "../../../../../packages/platform-browser/index.ts", "../../../../../packages/platform-browser/platform-browser.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  readonly supportsDOMEvents: boolean = true;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => {\n      el.removeEventListener(evt, listener, false);\n    };\n  }\n  dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document {\n    return document;\n  }\n\n  isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void {\n    baseElement = null;\n  }\n  getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationInitStatus, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: HTMLCollectionOf<HTMLStyleElement> =\n          document.querySelectorAll(`style[ng-transition=\"${transitionId}\"]`);\n      for (let i = 0; i < styles.length; i++) {\n        dom.remove(styles[i]);\n      }\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global} from '@angular/core';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   * @deprecated No longer being used in Ivy code. To be removed in version 14.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] {\n    return Array.from(this._stylesSet);\n  }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private _hostNodes = new Map<Node, Node[]>();\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.set(_doc.head, []);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node, styleNodes: Node[]): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      styleNodes.push(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    const styleNodes: Node[] = [];\n    this._addStylesToHost(this._stylesSet, hostNode, styleNodes);\n    this._hostNodes.set(hostNode, styleNodes);\n  }\n\n  removeHost(hostNode: Node): void {\n    const styleNodes = this._hostNodes.get(hostNode);\n    if (styleNodes) {\n      styleNodes.forEach(removeStyle);\n    }\n    this._hostNodes.delete(hostNode);\n  }\n\n  override onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach((styleNodes, hostNode) => {\n      this._addStylesToHost(additions, hostNode, styleNodes);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._hostNodes.forEach(styleNodes => styleNodes.forEach(removeStyle));\n  }\n}\n\nfunction removeStyle(styleNode: Node): void {\n  getDOM().remove(styleNode);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Inject, Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n  // the listener (see below).\n  return (event: any) => {\n    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n    // can inspect the listener toString contents for the existence of this special token. Because\n    // the token is a string literal, it is ensured to not be modified by compiled code.\n    if (event === '__ngUnwrap__') {\n      return eventHandler;\n    }\n\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n\n    return undefined;\n  };\n}\n\nlet hasLoggedNativeEncapsulationWarning = false;\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(\n      private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      @Inject(APP_ID) private appId: string) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              this.eventManager, this.sharedStylesHost, type, this.appId);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an enum\n      // value that is not known (but previously was the value for ViewEncapsulation.Native)\n      case 1:\n      case ViewEncapsulation.ShadowDom:\n        // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // @ts-ignore TODO: Remove as part of FW-2290. TS complains about us dealing with an\n            // enum value that is not known (but previously was the value for\n            // ViewEncapsulation.Native)\n            !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {\n          hasLoggedNativeEncapsulationWarning = true;\n          console.warn(\n              'ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');\n        }\n\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return document.createComment(value);\n  }\n\n  createText(value: string): any {\n    return document.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    NG_DEV_MODE && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as () => void;\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n        name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2, appId: string) {\n    super(eventManager);\n    const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n    this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n  }\n\n  applyToHost(element: any) {\n    super.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ApplicationRef, createPlatformFactory, EnvironmentProviders, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @developerPreview\n * @publicApi\n */\nexport interface ApplicationConfig {\n  /**\n   * List of providers that should be available to the root component and all its children.\n   */\n  providers: Array<Provider|EnvironmentProviders>;\n}\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n * @developerPreview\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n * @developerPreview\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @developerPreview\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER =\n    new InjectionToken(NG_DEV_MODE ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]}, {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost, APP_ID]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  NG_DEV_MODE ? {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} : []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    ...BROWSER_MODULE_PROVIDERS,  //\n    ...TESTABILITY_PROVIDERS\n  ],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if (NG_DEV_MODE && providersAlreadyPresent) {\n      throw new Error(\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n          `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see `Meta`\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {APP_ID, inject, Injectable, NgModule} from '@angular/core';\n\nexport function escapeHtml(text: string): string {\n  const escapedText: {[k: string]: string} = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;',\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nexport function unescapeHtml(text: string): string {\n  const unescapedText: {[k: string]: string} = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>',\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport type StateKey<T> = string&{\n  __not_a_string: never,\n  __value_type?: T,\n};\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport function makeStateKey<T = void>(key: string): StateKey<T> {\n  return key as StateKey<T>;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: () => {\n    const doc = inject(DOCUMENT);\n    const appId = inject(APP_ID);\n    const state = new TransferState();\n    state.store = retrieveTransferredState(doc, appId);\n    return state;\n  }\n})\nexport class TransferState {\n  private store: {[k: string]: unknown|undefined} = {};\n  private onSerializeCallbacks: {[k: string]: () => unknown | undefined} = {};\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get<T>(key: StateKey<T>, defaultValue: T): T {\n    return this.store[key] !== undefined ? this.store[key] as T : defaultValue;\n  }\n\n  /**\n   * Set the value corresponding to a key.\n   */\n  set<T>(key: StateKey<T>, value: T): void {\n    this.store[key] = value;\n  }\n\n  /**\n   * Remove a key from the store.\n   */\n  remove<T>(key: StateKey<T>): void {\n    delete this.store[key];\n  }\n\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey<T>(key: StateKey<T>) {\n    return this.store.hasOwnProperty(key);\n  }\n\n  /**\n   * Indicates whether the state is empty.\n   */\n  get isEmpty(): boolean {\n    return Object.keys(this.store).length === 0;\n  }\n\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void {\n    this.onSerializeCallbacks[key] = callback;\n  }\n\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson(): string {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    return JSON.stringify(this.store);\n  }\n}\n\nexport function retrieveTransferredState(doc: Document, appId: string) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n  if (script && script.textContent) {\n    try {\n      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n      initialState = JSON.parse(unescapeHtml(script.textContent)) as {};\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return initialState;\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n * @deprecated no longer needed, you can inject the `TransferState` in an app without providing\n *     this module.\n */\n@NgModule({})\nexport class BrowserTransferStateModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵgetSanitizationBypassType as getSanitizationBypassType, ɵunwrapSafeValue as unwrapSafeValue} from '@angular/core';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error(\n            'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see https://g.co/ng/security#xss)`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {ɵgetDOM} from '@angular/common';\nexport {initDomAdapter as ɵinitDomAdapter, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS} from './browser';\nexport {BrowserDomAdapter as ɵBrowserDomAdapter} from './browser/browser_adapter';\nexport {TRANSITION_ID as ɵTRANSITION_ID} from './browser/server-transition';\nexport {BrowserGetTestability as ɵBrowserGetTestability} from './browser/testability';\nexport {escapeHtml as ɵescapeHtml} from './browser/transfer_state';\nexport {DomRendererFactory2 as ɵDomRendererFactory2, flattenStyles as ɵflattenStyles, NAMESPACE_URIS as ɵNAMESPACE_URIS, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute} from './dom/dom_renderer';\nexport {DomEventsPlugin as ɵDomEventsPlugin} from './dom/events/dom_events';\nexport {HammerGesturesPlugin as ɵHammerGesturesPlugin} from './dom/events/hammer_gestures';\nexport {KeyEventsPlugin as ɵKeyEventsPlugin} from './dom/events/key_events';\nexport {DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost} from './dom/shared_styles_host';\nexport {DomSanitizerImpl as ɵDomSanitizerImpl} from './security/dom_sanitization_service';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('15.0.0-next.6');\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {BrowserTransferStateModule, makeStateKey, StateKey, TransferState} from './browser/transfer_state';\nexport {By} from './dom/debug/by';\nexport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "mappings": "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",
  "names": ["DomAdapter", "setRootDomAdapter", "parseCookieValue", "document", "getDOM", "global", "plugin", "NG_DEV_MODE", "internalCreateApplication", "PLATFORM_BROWSER_ID", "TESTABILITY_GETTER", "TESTABILITY", "INJECTOR_SCOPE", "elem", "global", "window", "getDOM", "console", "Console", "allowSanitizationBypassOrThrow", "unwrapSafeValue", "_sanitizeHtml", "_sanitizeUrl", "bypassSanitizationTrustHtml", "bypassSanitizationTrustStyle", "bypassSanitizationTrustScript", "bypassSanitizationTrustUrl", "bypassSanitizationTrustResourceUrl"]
}
